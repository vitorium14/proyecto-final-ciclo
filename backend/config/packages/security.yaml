security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

    access_control:
        # Public access for login and client registration
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register$, roles: PUBLIC_ACCESS } # Use $ for exact match

        # Admin only routes
        - { path: ^/api/register/employee, roles: ROLE_ADMIN }
        - { path: ^/api/users, methods: [GET, PATCH, DELETE], roles: ROLE_ADMIN } # List, Update, Delete users

        # Employee (and Admin) routes
        - { path: ^/api/rooms, methods: [POST, PATCH, DELETE], roles: [ROLE_EMPLOYEE, ROLE_ADMIN] }
        - { path: ^/api/reservations$, methods: [GET], roles: [ROLE_EMPLOYEE, ROLE_ADMIN] } # List all reservations
        - { path: ^/api/reservations/\d+$, methods: [PATCH, DELETE], roles: [ROLE_EMPLOYEE, ROLE_ADMIN] } # Update/Delete specific reservation
        - { path: ^/api/services, methods: [POST, PATCH, DELETE], roles: ROLE_EMPLOYEE }

        # Authenticated users (covers GET /api/users/{id}, GET /api/reservations/{id}, GET /api/reservations/my, POST /api/reservations)
        # Also covers public GET for /api/rooms and /api/services if needed, otherwise they are public by default if not matched above
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # Default: Allow public access to anything else (e.g., potentially docs if added later)
        # - { path: ^/, roles: PUBLIC_ACCESS } # Uncomment if needed, but usually covered by firewall setup

