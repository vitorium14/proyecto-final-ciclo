security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # Use standard password hasher for your user entity
        App\Entity\User: 'auto'
        # Keep the default for other potential user types if needed
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Remove or comment out the default memory provider:
        # users_in_memory: { memory: null }
        # Add the Doctrine entity provider for your User class
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email # The field used for login
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Define firewall for the login endpoint
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login # The URL users submit credentials to
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # Define the main firewall for your API routes
        api:
            pattern:   ^/api # All routes starting with /api
            stateless: true
            jwt:
                provider: app_user_provider # Use the provider defined above
            # Remove or comment out the main firewall if it's not needed anymore
        # main:
        #     lazy: true
        #     provider: users_in_memory # Change this if you keep the main firewall

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Allow anonymous access to the login route
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # Allow anonymous access to the client user creation route
        - { path: ^/api/users/client, roles: PUBLIC_ACCESS, methods: [POST] }
        # Secure other API routes, requiring an authenticated user (valid JWT)
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # Comment out or remove default access controls if not needed
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
